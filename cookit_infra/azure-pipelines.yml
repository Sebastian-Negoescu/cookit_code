trigger:
- dev

variables:
  subscription: "http://AzDevOps"
  branch: "dev"
  location: "West Europe"

stages:
  - stage: "Test_Agent_connectivity"
    pool: "Default"
    displayName: "Testing Agent Connectivity"
    jobs:
      - job: "Clean_Workspace"
        workspace:
          clean: all
      - job: "EchoAgent_DummyText"
        displayName: "Echo Agent - Dummy Text"
        steps:
        - bash: |
            which bash
            echo "Agent Name & ID: $AGENT_NAME : $AGENT_ID."
            echo "Current working directory: $SYSTEM_DEFAULTWORKINGDIRECTORY"
            echo "Current Build Sources directory: $BUILD_SOURCESDIRECTORY"
          displayName: "Ping"
          continueOnError: true
      - job: "Assert_Connectivity"
        dependsOn: "EchoAgent_DummyText"
        condition: succeeded()
        displayName: "Assert Connectivity with the Agent"
        steps:
        - task: Bash@3
          displayName: "Assert 'PING'"
          inputs:
            targetType: inline
            script: "echo 'Connectivity: SUCCESSFULL; continue the pipeline...'"
      - job: "Check_FileTree"
        dependsOn: "Assert_Connectivity"
        condition: succeeded()
        displayName: "Check the structure of the repo"
        steps:
        - task: PowerShell@2
          displayName: "Filetree listing"
          inputs:
            targetType: inline
            script: "Get-Location && Get-ChildItem -Recurse"

  - stage: "Build_App"
    dependsOn: "Test_Agent_Connectivity"
    condition: succeeded()
    displayName: "Build the Application"
    pool: "Default"
    jobs:
      - job: "Build_Django_Job"
        displayName: "Build Django App"
        steps:
        - task: UsePythonVersion@0
          name: "Set_Python_v3x"
          displayName: "Set Python Version"
          inputs:
            versionSpec: '3.8.1'
            addToPath: true
        - task: CmdLine@2
          name: "Install_Dependencies"
          displayName: "Install Dependencies"
          inputs:
            script: "pip3 install -r cookit_proj/requirements.txt"
        ### TO DO: CommandLine - pytest: install pytest, run UNIT tests, using --jUnitXML for results
        ### TO DO: Publish Test Artifact - publish test results as JUnit format with file **/test-results.xml
        - task: ArchiveFiles@2
          name: "Archive_App"
          displayName: "Archive Application"
          inputs:
            archiveType: "zip"
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/cookit_proj"
            includeRootFolder: false
            archiveFile: "$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip"
            replaceExistingArchive: true
        ### TO DO: Archive Files - Archive Test Results
        - task: PublishBuildArtifacts@1
          name: "Publish_App"
          displayName: "Publish App Artifact"
          inputs:
            PathtoPublish: "$(Build.ArtifactStagingDirectory)"
            ArtifactName: "CookIT"
            publishLocation: "Container"

  - stage: "Create_Infrastructure"
    dependsOn: "Test_Agent_Connectivity"
    condition: succeeded()
    pool: "Default"
    displayName: "Create Azure Infrastructure"
    jobs:
      - job: "Create_RG"
        displayName: "Create Resource Group"
        steps:
        - task: PowerShell@2
          name: "Set_Facts"
          displayName: "Set Facts - register Vars"
          inputs:
            targetType: "inline"
            script: |
              $env:masterFile = (Get-ChildItem -Recurse -Filter "master.json" | Select-Object FullName).FullName
              Write-Host "Found Master File at: $($env:masterFile)." -ForegroundColor DarkYellow
              # Write-Host "Initial Read of the file:" -ForegroundColor DarkBlue # TO DELETE
              # Get-Content -Path $($env:masterFile) # TO DELETE
              $env:masterContent = Get-Content -Path $($env:masterFile) -Raw
              Write-Host "Print the content of the Master File for double-checking purposes..."
              $($env:masterContent)
              $masterContentJson = ConvertFrom-JSON $($env:masterContent)
              $env:prefix = $($masterContentJson).parameters.prefix.defaultValue
              Write-Host "Prefix set as: $($env:prefix)." -ForegroundColor DarkYellow
              $env:rgName = $($env:prefix) + "_rg"
              Write-Host "RG Name set as: $($env:rgName)." -ForegroundColor DarkYellow
              $env:repoUrl = $($masterContentJson).variables.repoUrl
              Write-Host "Repo URL set at: $($env:repoUrl)" -ForegroundColor DarkYellow
              $env:templateUri = $($env:repoUrl) + "$(branch)" + "/cookit_infra/master.json"
              $env:deploymentName = "$(branch)" + "-" + "$(Build.SourceVersion)"
              Write-Host "Complete TemplateURI set at: $($env:templateUri)" -ForegroundColor DarkYellow
              Write-Host "Converting the variables to Azure DevOps ENV VARs."  -ForegroundColor DarkBlue
              Write-Host "##vso[task.setvariable variable=vsoPrefix;isOutput=true]$($env:prefix)"
              Write-Host "##vso[task.setvariable variable=vsoRgName;isOutput=true]$($env:rgName)"
              Write-Host "##vso[task.setvariable variable=vsoRepoUrl;isOutput=true]$($env:repoUrl)"
              Write-Host "##vso[task.setvariable variable=vsoTemplateUri;isOutput=true]$($env:templateUri)"
              Write-Host "##vso[task.setvariable variable=vsoDeploymentName;isOutput=true]$($env:deploymentName)"
        - task: AzurePowerShell@5
          name: "Check_ENVVARs"
          displayName: "Check ENV VARs"
          inputs:
            azureSubscription: $(subscription)
            azurePowerShellVersion: "LatestVersion"
            ScriptType: "InlineScript"
            Inline: |
              gci env:*
        - task: AzurePowerShell@5
          name: "Check_RG"
          displayName: "Check if Resource Group exists"
          inputs:
            azureSubscription: $(subscription)
            azurePowerShellVersion: "LatestVersion"
            ScriptType: "InlineScript"
            Inline: |
              Write-Host "Check if Resource Group $(Set_Facts.vsoRgName) exists..."
              Get-AzResourceGroup -Name $(Set_Facts.vsoRgName) -ErrorAction SilentlyContinue
              If ($?) {
                Write-Host "Resource Group $(Set_Facts.vsoRgName) already exists. Continue the deployment."
              } Else {
                Write-Host "Resource Group $(Set_Facts.vsoRgName) does NOT exist. Let's create it first..."
                New-AzResourceGroup -Name $(Set_Facts.vsoRgName) -Location "$(location)"
                Write-Host "Resource Group created. Let's continue the deployment..."
              }
              
      - job: "Create_Resources"
        displayName: "Deploy Azure Resource Manager Template"
        dependsOn: "Create_RG"
        condition: succeeded()
        variables:
          myVsoPrefix: $[ dependencies.Create_RG.outputs['Set_Facts.vsoPrefix'] ]
          myVsoRgName: $[ dependencies.Create_RG.outputs['Set_Facts.vsoRgName'] ]
          myVsoRepoUrl: $[ dependencies.Create_RG.outputs['Set_Facts.vsoRepoUrl'] ]
          myVsoTemplateUri: $[ dependencies.Create_RG.outputs['Set_Facts.vsoTemplateUri'] ]
          myVsoDeploymentName: $[ dependencies.Create_RG.outputs['Set_Facts.vsoDeploymentName'] ]
        steps:
          - task: AzurePowerShell@5
            name: "Check_EnvVarsNaming"
            inputs:
              azureSubscription: "$(subscription)"
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                Get-ChildItem env:*
          - task: AzurePowerShell@5
            name: "Export_VARs"
            displayName: "Export Variables for deployment stages"
            inputs:
              azureSubscription: "$(subscription)"
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                ### Set variable for prefix
                New-Item -Name "variables" -Type Directory -Path "$(Pipeline.Workspace)" -Force
                $env:MYVSOPREFIX > "$(Pipeline.Workspace)/variables/myVsoPrefix"
                Write-Host "Verify if the Value of the Prefix variable is written..."
                Get-Content $(Pipeline.Workspace)/variables/myVsoPrefix
                ### Set variable for Resource Group
                $env:MYVSORGNAME > "$(Pipeline.Workspace)/variables/myVsoRgName"
                Write-Host "Verify if the Value of the RGName variable is written..."
                Get-Content $(Pipeline.Workspace)/variables/myVsoRgName
          - task: PublishPipelineArtifact@1
            name: "Publish_Variables"
            displayName: "Publish Variables as Artifact"
            inputs:
              artifact: "myVarsArtifact"
              targetPath: "$(Pipeline.Workspace)/variables" 
          - task: AzurePowerShell@5
            name: "Test_ARMTemplates"
            displayName: "Test Azure Resource Group Deployment"
            inputs:
              azureSubscription: $(subscription)
              azurePowerShellVersion: LatestVersion
              ScriptType: "InlineScript"
              Inline: |
                Write-Host "Testing RG Deployment..."
                $testCommand = Test-AzResourceGroupDeployment -ResourceGroupName $(myVsoRgName) -TemplateUri $(myVsoTemplateUri) -branch "$(branch)"
                If ($($testCommand.Code)) {
                  Write-Host "Stop pipeline... See details below."
                  Write-Host "Error Code: $($testCommand.Code)"
                  Write-Host "Error Message: $($testCommand.Message)"
                  $env:testStatus = "Failed"
                  Write-Host "##vso[task.setvariable variable=VSOTESTSTATUS;]$($env:testStatus)"
                } Else {
                  $env:testStatus = "Okay"
                  Write-Host "##vso[task.setvariable variable=VSOTESTSTATUS;]$($env:testStatus)"
                }
                Write-Host "To be used in further Job:Tasks as VSOTESTSTATUS (not TEST_ARMTEMPLATES_VSOTESTSTATUS)"
          - task: AzurePowerShell@5
            name: "Check_Status"
            displayName: "List New_EnvVars"
            inputs:
              azureSubscription: $(subscription)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                Get-ChildItem env:* #should be named VSOTESTSTATUS (not TEST_ARMTEMPLATES_VSOTESTSTATUS)
          - task: AzureResourceGroupDeployment@2
            condition: and(succeeded(), eq(variables['VSOTESTSTATUS'], 'Okay'))
            name: "Deploy_Resources"
            displayName: "Deploy Azure Resource Group Template"
            inputs:
              azureSubscription: $(subscription)
              action: Create Or Update Resource Group
              deploymentName: $(myVsoDeploymentName)
              resourceGroupName: $(myVsoRgName)
              templateLocation: "URL of the file"
              csmFileLink: $(myVsoTemplateUri)
              overrideParameters:
                -branch "$(branch)"
              deploymentMode: "Incremental"
              deploymentOutputs: armOutputsJson
          - task: AzurePowerShell@5
            name: "Deployment_Outputs"
            inputs:
              azureSubscription: "$(subscription)"
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                Write-Host "Check if the previous Deployment Outputs Variable was created..."
                Write-Host "$(armOutputsJson)"
                Write-Host "Check if it is iin the Environment Variables..."
                Get-ChildItem env:*
                #############################################################################################################################
                #################################### CONVERT THE OUTPUTS FROM JSON && EXTRACT THE VALUES ####################################
                #############################################################################################################################
                $armOutputs = '$(armOutputsJson)' | ConvertFrom-JSON
                $armOutputsWebAppName = "$($armOutputs.webappNameLinked.value)"
                Write-Host "Our Web App's name is: $armOutputsWebAppName."

  - stage: "Deploy_Application"
    displayName: "Deploy Django Application"
    dependsOn:
      - "Build_App"
      - "Create_Infrastructure"
    condition: succeeded()
    pool: "Default"
    jobs:
      - job: "Deploy_App_Dev"
        displayName: "Deploy Django to DEV"
        steps:
        - task: DownloadPipelineArtifact@2
          name: "Download_myVarsArtifact"
          inputs:
            artifactName: "myVarsArtifact"
            source: "current"
            targetPath: "$(Pipeline.Workspace)"
        # Read the variable from the file, then expose it in the job 
        - task: AzurePowerShell@5
          name: "Read_Variables"
          displayName: "Read the variables from Build"
          inputs:
            azureSubscription: $(subscription)
            azurePowerShellVersion: "LatestVersion"
            ScriptType: "InlineScript"
            Inline: |
              $myPrefix = Get-Content "$(Pipeline.Workspace)/myVsoPrefix"
              $env:myPrefix = $myPrefix
              Write-Host "My Prefix to be used: $($env:myPrefix)"
              Write-Host "##vso[task.setvariable variable=VSOPREFIX;]$($env:myPrefix)"
              $myRgName = Get-Content "$(Pipeline.Workspace)/myVsoRgName"
              $env:myRgName = $myRgName
              Write-Host "My Resource Group Name to be used: $($env:myRgName)"
              Write-Host "##vso[task.setvariable variable=VSORGNAME;]$($env:myRgName)"
              # https://medium.com/microsoftazure/how-to-pass-variables-in-azure-pipelines-yaml-tasks-5c81c5d31763
              Write-Host "DELETE THIS LINE AFTER TEST; printing envvars..."
              Get-ChildItem env:*
        - task: DownloadBuildArtifacts@0
          name: "Download_DjangoArtifact"
          displayName: "Download Application Artifact"
          inputs:
            artifactName: "CookIT"
            buildType: "current"
            downloadType: "single"
            downloadPath: $(Pipeline.Workspace)
        - task: AzureRmWebAppDeployment@4
          displayName: "DeployDEV"
          inputs:
            azureSubscription: "$(subscription)"
            appType: WebAppLinux
            ResourceGroupName: $(VSORGNAME)
            WebAppName: "$(VSOPREFIX)-webapp"
            deployToSlotOrASE: true
            SlotName: "$(branch)"
            packageForLinux: "$(Pipeline.Workspace)/CookIT/Application$(Build.BuildId).zip"
