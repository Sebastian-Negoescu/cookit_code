trigger:
- dev

variables:
  subscription: "http://AzDevOps"
  branch: "dev"

stages:
  - stage: "Test_Agent_connectivity"
    pool: "Default"
    displayName: "Testing Agent Connectivity"
    jobs:
      - job: "Clean_Workspace"
        workspace:
          clean: all
      - job: "EchoAgent_DummyText"
        displayName: "Echo Agent - Dummy Text"
        steps:
        - bash: |
            which bash
            echo "Agent Name & ID: $AGENT_NAME : $AGENT_ID."
            echo "Current working directory: $SYSTEM_DEFAULTWORKINGDIRECTORY"
            echo "Current Build Sources directory: $BUILD_SOURCESDIRECTORY"
          displayName: "Ping"
          continueOnError: true
      - job: "Assert_Connectivity"
        dependsOn: "EchoAgent_DummyText"
        condition: succeeded()
        displayName: "Assert Connectivity with the Agent"
        steps:
        - task: Bash@3
          displayName: "Assert 'PING'"
          inputs:
            targetType: inline
            script: "echo 'Connectivity: SUCCESSFULL; continue the pipeline...'"
      - job: "Check_FileTree"
        dependsOn: "Assert_Connectivity"
        condition: succeeded()
        displayName: "Check the structure of the repo"
        steps:
        - task: PowerShell@2
          displayName: "Filetree listing"
          inputs:
            targetType: inline
            script: "Get-Location && Get-ChildItem -Recurse"

  - stage: "Create_Infrastructure"
    dependsOn: "Test_Agent_Connectivity"
    condition: succeeded()
    pool: "Default"
    displayName: "Create Azure Infrastructure"
    jobs:
      - job: "Create_RG"
        displayName: "Create Resource Group"
        steps:
        - task: PowerShell@2
          name: "Set_Facts"
          displayName: "Set Facts - register Vars"
          inputs:
            targetType: inline
            script: |
              $env:masterFile = (Get-ChildItem -Recurse -Filter "master.json" | Select-Object FullName).FullName
              Write-Host "Found Master File at: $($env:masterFile)." -ForegroundColor DarkYellow
              Write-Host "Initial Read of the file:" -ForegroundColor DarkBlue
              Get-Content -Path ($env:masterFile)
              $env:masterContent = (Get-Content -Path $($env:masterFile) | Out-String | ConvertFrom-JSON)
              Write-Host "Content of the Master File..."
              $($env:masterContent)
              $env:prefix = $($env:masterContent.parameters.prefix.defaultValue)
              Write-Host "Prefix set as: $($env:prefix)." -ForegroundColor DarkYellow
              $env:rgName = $($env:prefix) + "_rg"
              Write-Host "RG Name set as: $($env:rgName)." -ForegroundColor DarkYellow
              Write-Host "Converting the variables to Azure DevOps ENV VARs."  -ForegroundColor DarkBlue
              Write-Host "##vso[task.setvariable variable=vsoPrefix;]$($env:prefix)"
              Write-Host "##vso[task.setvariable variable=vsoRgName;]$($env:rgName)"
        - task: AzurePowerShell@5
          name: "Check_ENVVARs"
          displayName: "Check ENV VARs"
          inputs:
            azureSubscription: $(subscription)
            azurePowerShellVersion: "LatestVersion"
            ScriptType: "InlineScript"
            Inline: |
              gci env:*


        
